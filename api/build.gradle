buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'io.ratpack:ratpack-gradle:0.9.11',
                'com.bluepapa32:gradle-watch-plugin:0.1.4'

    }
}

if (!JavaVersion.current().java8Compatible) {
    throw new IllegalStateException("Must be built with Java 8 or higher")
}

apply plugin: 'io.ratpack.ratpack-java'
apply plugin: 'com.bluepapa32.watch'
apply plugin: 'idea'
apply plugin: 'groovy'
apply plugin: 'jacoco'

repositories {
    jcenter()
    maven { url "https://repo.spring.io/repo" } // for springloaded
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" } // for Flipside
}

dependencies {
    // SpringLoaded enables runtime hot reloading.
    // It is not part of the app runtime and is not shipped in the distribution.
    springloaded "org.springframework:springloaded:1.2.1.RELEASE"

    // Persistence
    compile 'de.caluga:morphium:2.2.15'

    // Password hashing
    compile 'org.mindrot:jbcrypt:0.3m'

    // JSON
    compile 'io.ratpack:ratpack-jackson:0.9.11'

    // Flipside
    compile('com.johnnywey:flipside:0.1.14-SNAPSHOT') {
        exclude module: 'groovy-all'
    }

    // Default SLF4J binding.  Note that this is a blocking implementation.
    // See here for a non blocking appender http://logging.apache.org/log4j/2.x/manual/async.html
    runtime 'org.slf4j:slf4j-simple:1.7.7'

    testCompile "org.spockframework:spock-core:0.7-groovy-2.0"
    testCompile "org.codehaus.groovy:groovy-all:2.3.8"
}

watch {
    java {
        files files('src/main/java')
        tasks 'compileJava'
    }
}

task watchThread() << {
    Thread.start {
        project.tasks.watch.execute()
    }
}
run.mustRunAfter watchThread

task dev(dependsOn: [watchThread, run])

test {
    String testType = System.properties['test.type']
    if (testType == 'integration') {
        include '**/*IntegrationTest.*'
        include '**/*IntegrationSpec.*'
    } else if (testType == 'unit') {
        include '**/*Test.*'
        include '**/*Spec.*'
        exclude '**/*IntegrationTest.*'
        exclude '**/*IntegrationSpec.*'
    } else if (testType == 'all') {
        include '**/*Test.*'
        include '**/*Spec.*'
    } else {
        //Default to unit
        include '**/*Test.*'
        include '**/*Spec.*'
        exclude '**/*IntegrationTest.*'
        exclude '**/*IntegrationSpec.*'
    }

    // Prints results of test inline
    afterSuite { desc, result ->
        // Don't report on modules with no test suites
        if (!desc.className) {
            return
        }

        String testStatus
        if (System.properties['nocolor']) {
            testStatus = result.resultType
        } else if (result.resultType != org.gradle.api.tasks.testing.TestResult.ResultType.SUCCESS) {
            // Print in red if failed
            testStatus = "\033[31m${result.resultType}\033[0m"
        } else {
            // Print in green if success/skipped
            testStatus = "\033[32m${result.resultType}\033[0m"
        }
        println "Test suite ${desc.name}: ${testStatus}"
    }
}

jacoco {
    toolVersion = "0.7.2.201409121644"
}

task cover(dependsOn: [test, jacocoTestReport])

idea {
    project {
        //use JDK 1.8 in idea
        jdkName "1.8"
        languageLevel "1.8"
        ipr {
            withXml { provider ->
                def node = provider.asNode()
                //configure git support for the project in idea
                node.component.find { it.'@name' == 'VcsDirectoryMappings' }?.mapping[0].'@vcs' = 'Git'
            }
        }
    }
}
